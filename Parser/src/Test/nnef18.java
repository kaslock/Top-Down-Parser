/* Generated By:JavaCC: Do not edit this line. nnef18.java */
package Test;


import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class nnef18 implements nnef18Constants {
  public static void main(String args []) throws ParseException
  {
    nnef18 parser = new nnef18(System.in);
    System.out.println("Reading from standard input...");
    String output = parser.one_line();
    System.out.println(output);


      File file = new File("output.txt");
        FileWriter writer = null;
        BufferedWriter bWriter = null;

        try {
            writer = new FileWriter(file, true);
            bWriter = new BufferedWriter(writer);

            bWriter.write(output);
            bWriter.flush();

            System.out.println("DONE");
        } catch(IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if(bWriter != null) bWriter.close();
                if(writer != null) writer.close();
            } catch(IOException e) {
                e.printStackTrace();
            }
        }



  }

  final public String one_line() throws ParseException {
    trace_call("one_line");
    try {
        String res = "";
      if (jj_2_1(10)) {
        res = graph_definition();
                                  ;
      } else if (jj_2_2(10)) {
        res = fragment_definition();
                                                                        ;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
     {if (true) return res;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("one_line");
    }
  }

  final public String graph_definition() throws ParseException {
    trace_call("graph_definition");
    try {
        String f;
        String def = "";
      def = graph_declaration();
                                      ;
      f = body();
                                                        def += f;
                {if (true) return def;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("graph_definition");
    }
  }

  final public String graph_declaration() throws ParseException {
    trace_call("graph_declaration");
    try {
        String res= "";
        Token id;
        String l_list;
        String r_list;
        String name;
      jj_consume_token(8);
      id = jj_consume_token(IDENTIFIER);
      jj_consume_token(L_PAREN);
      l_list = identifier_list();
      jj_consume_token(R_PAREN);
      jj_consume_token(ARROW);
      jj_consume_token(L_PAREN);
      identifier_list();
      jj_consume_token(R_PAREN);
                 {if (true) return res;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("graph_declaration");
    }
  }

  final public String identifier_list() throws ParseException {
    trace_call("identifier_list");
    try {
        String res = "";
        Token l_id;
        Token r_id;
      l_id = jj_consume_token(IDENTIFIER);
                                   res += l_id.toString();
      label_1:
      while (true) {
        if (jj_2_3(10)) {
          ;
        } else {
          break label_1;
        }
        jj_consume_token(COMMA);
        r_id = jj_consume_token(IDENTIFIER);
                                                                                                  res += "," + r_id.toString();
      }
                {if (true) return res;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("identifier_list");
    }
  }

  final public String body() throws ParseException {
    trace_call("body");
    try {
  String res = "";
  String f;
      jj_consume_token(L_BRACE);
      if (jj_2_6(10)) {
        label_2:
        while (true) {
          f = assignment();
                                      res += f;
          if (jj_2_4(10)) {
            ;
          } else {
            break label_2;
          }
        }
      } else if (jj_2_7(10)) {
        label_3:
        while (true) {
          f = assignment_frg();
                                                                               res += f;
          if (jj_2_5(10)) {
            ;
          } else {
            break label_3;
          }
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(R_BRACE);
                {if (true) return res;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("body");
    }
  }

  final public String assignment() throws ParseException {
    trace_call("assignment");
    try {
  String res = "";
  String f;
  String s;
      f = lvalue_expr();
                          res += f;
      jj_consume_token(ASSIGN);
                                                     res += "=";
      s = invocation();
                                                                                        res += s;
      jj_consume_token(SEMI_COLON);
                                                                                                                       res += ";\u005cr\u005cn";
        {if (true) return res;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("assignment");
    }
  }

  final public String rvalue_expr() throws ParseException {
    trace_call("rvalue_expr");
    try {
        String res = "";
        String f;
        Token id;
      if (jj_2_8(10)) {
        id = jj_consume_token(IDENTIFIER);
                                res += id.toString();
      } else if (jj_2_9(10)) {
        res = literal();
                                ;
      } else if (jj_2_10(10)) {
        res = array_rvalue_expr();
                                          ;
      } else if (jj_2_11(10)) {
        res = tuple_rvalue_expr();
                                          ;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
     {if (true) return res;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("rvalue_expr");
    }
  }

  final public String if_identifier_expr() throws ParseException {
    trace_call("if_identifier_expr");
    try {
        String result = "";
        Token t;
        String f;
      t = jj_consume_token(IDENTIFIER);
                        f = t.toString(); result += " " + f;
      t = jj_consume_token(IDENTIFIER);
                                                                                     f = t.toString(); result +=  " " + f;
      t = jj_consume_token(IDENTIFIER);
                                                                                                                                                  f = t.toString(); result += " " + f;
      t = jj_consume_token(IDENTIFIER);
                                                                                                                                                                                                              f = t.toString(); result +=  " " + f;
      {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("if_identifier_expr");
    }
  }

  final public String built_if_expr() throws ParseException {
    trace_call("built_if_expr");
    try {
        String result = "";
        String f;
      f = builtin_expr();
                                   result +=  " " +  f;
      f = array_literal_expr();
                                                                                         result += f;
      if (jj_2_12(10)) {
        jj_consume_token(DIV);
                                                                                                                 result += " / ";
        f = if_invoc_else_expr();
                                                                                                                                                                   result += " " +  f;
      } else {
        ;
      }
            {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("built_if_expr");
    }
  }

  final public String if_expr() throws ParseException {
    trace_call("if_expr");
    try {
        String result = "";
        Token t;
        String f;
      t = jj_consume_token(IDENTIFIER);
                              f = t.toString(); result +=  " " +  f;
      t = jj_consume_token(IDENTIFIER);
                                                                                             f = t.toString(); result += " " +  f;
      t = jj_consume_token(IDENTIFIER);
                                                                                                                                                          f = t.toString(); result +=  " " + f;
      f = invocation();
                                                                                                                                                                                                                       result += " " + f;
      jj_consume_token(SEMI_COLON);
                                                                                                                                                                                                                                                               result += ";" + "\u005cr\u005cn";
      {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("if_expr");
    }
  }

  final public String invocation() throws ParseException {
    trace_call("invocation");
    try {
        Token id;
        String type = "";
        String name;
        String Result = "";
        String f = "";
      id = jj_consume_token(IDENTIFIER);
            name = id.toString();
                switch(name){
                  case "variable":
                        Result += " tf.Variable";
                        break;
                  case "avg_pool":
                        Result += " tf.nn.avg_pool";
                        break;
                  case "constant":
                        Result += " tf.constant";
                        break;
                  case "conv":
                        Result += " tf.layers.conv2d";
                    break;
                  case "deconv":
                        Result += " tf.layers.conv2d_transpose";
                    break;
                  case "concat":
                        Result += " tf.concat";
                    break;
                  case "tanh":
                        Result += " tf.tanh";
                    break;
                  case "sigmoid":
            Result += " tf.sigmoid";
                    break;
                  case "relu":
                        Result += " tf.nn.relu";
                    break;
                  case "conv_layer":
                        Result += " tf.nn.conv2d";
                    break;
                  case "max_pool_layer":
            Result += " tf.nn.max_pool";
                    break;
                  case "max_pool":
                        Result += " tf.nn.max_pool";
                        break;
                  case "reshape":
                        Result += " tf.reshape";
                        break;
                  case "matmul":
                        Result += " tf.matmul";
                    break;
                  case "local_response_normalization":
                        Result += " tf.nn.local_response_normalization";
                    break;
                  case "dropout":
                        Result += " tf.nn.dropout";
                    break;
                  case "add":
                        Result += " tf.add";
                    break;
                  case "softmax":
                        Result += " tf.nn.softmax";
                    break;
                  default:
                        Result += " " + name;
                        break;
                }
      if (jj_2_13(10)) {
        jj_consume_token(LESS);
        type = type_name();
        jj_consume_token(53);
      } else {
        ;
      }
      jj_consume_token(L_PAREN);
                           Result += "(";
      f = argument_list();
                                   Result += f;
      jj_consume_token(R_PAREN);
                           Result += ")";
                {if (true) return Result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("invocation");
    }
  }

  final public String argument_list() throws ParseException {
    trace_call("argument_list");
    try {
        String res = "";
        String f;
      f = argument();
                            res += f;
      label_4:
      while (true) {
        if (jj_2_14(10)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(COMMA);
        f = argument();
                                                                        res += "," + f;
      }
     {if (true) return res;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("argument_list");
    }
  }

  final public String array_argument() throws ParseException {
    trace_call("array_argument");
    try {
        String result = "";
        String f;
      jj_consume_token(L_PAREN);
                   result += "(";
      f = argument_list();
                                   result += f;
      jj_consume_token(R_PAREN);
                   result += ")";
            {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("array_argument");
    }
  }

  final public String argument() throws ParseException {
    trace_call("argument");
    try {
        Token id;
        String result = "";
        String f;
        String name;
      if (jj_2_15(10)) {
        id = jj_consume_token(IDENTIFIER);
                                          result += id.toString();
        jj_consume_token(ASSIGN);
                                 result += "=";
        f = rvalue_expr();
                                        result += f;
      } else if (jj_2_16(10)) {
        f = rvalue_expr_frg();
                                              result += f;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_5:
      while (true) {
        if (jj_2_17(10)) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(PLUS);
                           result += "+";
        f = rvalue_expr_frg();
                                                                      result += f;
      }
        {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("argument");
    }
  }

  final public String lvalue_expr() throws ParseException {
    trace_call("lvalue_expr");
    try {
  String result = "";
  Token id;
      if (jj_2_18(10)) {
        id = jj_consume_token(IDENTIFIER);
                            result = id.toString();
      } else if (jj_2_19(10)) {
        result = array_lvalue_expr();
                                      ;
      } else if (jj_2_20(10)) {
        result = tuple_lvalue_expr();
                                      ;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lvalue_expr");
    }
  }

  final public String array_lvalue_expr() throws ParseException {
    trace_call("array_lvalue_expr");
    try {
        String result = "";
        String f;
        String s;
      jj_consume_token(L_BRACKET);
      if (jj_2_22(10)) {
        f = lvalue_expr();
                                                result += f;
        label_6:
        while (true) {
          if (jj_2_21(10)) {
            ;
          } else {
            break label_6;
          }
          jj_consume_token(COMMA);
          s = lvalue_expr();
                                                                                              result += ',' + s;
        }
      } else {
        ;
      }
      jj_consume_token(R_BRACKET);
                {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("array_lvalue_expr");
    }
  }

  final public String tuple_lvalue_expr() throws ParseException {
    trace_call("tuple_lvalue_expr");
    try {
        String result = "";
        String f;
        String s;
        Token t;
      if (jj_2_27(10)) {
        jj_consume_token(L_PAREN);
        f = lvalue_expr();
                                            result += f;
        label_7:
        while (true) {
          jj_consume_token(COMMA);
          s = lvalue_expr();
                                                                                          result += ',' + s;
          if (jj_2_23(10)) {
            ;
          } else {
            break label_7;
          }
        }
        jj_consume_token(R_PAREN);
      } else if (jj_2_28(10)) {
        if (jj_2_24(10)) {
          t = jj_consume_token(IDENTIFIER);
                                 f = t.toString(); result += f;
        } else if (jj_2_25(10)) {
          f = array_lvalue_expr();
                                                                                                result += f;
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_8:
        while (true) {
          jj_consume_token(COMMA);
          s = lvalue_expr();
                                                                                                                                               result += ',' + s;
          if (jj_2_26(10)) {
            ;
          } else {
            break label_8;
          }
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
                {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("tuple_lvalue_expr");
    }
  }

  final public String if_invoc_else_expr() throws ParseException {
    trace_call("if_invoc_else_expr");
    try {
        String result = "";
        String f;
        String s;
        Token t;
      t = jj_consume_token(IDENTIFIER);
                                   result += " " + t.toString();
      jj_consume_token(20);
                                                                             result += " if ";
      f = rvalue_expr_frg();
                                                                                                                           result += f;
      if (jj_2_29(10)) {
        t = jj_consume_token(NOT_EQUAL);
      } else if (jj_2_30(10)) {
        t = jj_consume_token(EQUAL);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                      result += " " + t.toString();
      t = jj_consume_token(NUMERIC_LITERAL);
                                        result += " " + t.toString();
      jj_consume_token(21);
                                                                                   result += " else";
      if (jj_2_32(10)) {
        jj_consume_token(L_BRACKET);
                      result += "[";
        if (jj_2_31(10)) {
          t = jj_consume_token(IDENTIFIER);
                                                               result += t.toString();
        } else {
          ;
        }
        jj_consume_token(R_BRACKET);
                                                                                                 result += "]";
      } else if (jj_2_33(10)) {
        t = jj_consume_token(NUMERIC_LITERAL);
                                            result += " " + t.toString();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
            {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("if_invoc_else_expr");
    }
  }

  final public String plus_rcall_expr() throws ParseException {
    trace_call("plus_rcall_expr");
    try {
        String result = "";
        Token t;
        String f;
      t = jj_consume_token(IDENTIFIER);
                                   f = t.toString(); result += f;
      jj_consume_token(PLUS);
                                                                            result += "+";
      label_9:
      while (true) {
        f = literal();
                                                                                                               result += f;
        if (jj_2_34(10)) {
          ;
        } else {
          break label_9;
        }
      }
              {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("plus_rcall_expr");
    }
  }

  final public String array_rcall_expr() throws ParseException {
    trace_call("array_rcall_expr");
    try {
        String result = "";
        Token t;
        String f;
      t = jj_consume_token(IDENTIFIER);
                                     f = t.toString(); result += f;
      jj_consume_token(L_BRACKET);
                                                                              result += "[";
      label_10:
      while (true) {
        if (jj_2_35(10)) {
          jj_consume_token(COLON);
                                                                                                         result += ":" ;
        } else {
          ;
        }
        t = jj_consume_token(NUMERIC_LITERAL);
                                                                                                                                                    f = t.toString(); result += f;
        if (jj_2_36(10)) {
          jj_consume_token(COLON);
                                                                                                                                                                                             result += ":" ;
        } else {
          ;
        }
        if (jj_2_37(10)) {
          ;
        } else {
          break label_10;
        }
      }
      jj_consume_token(R_BRACKET);
                                                                                                                                                                                                                        result += "]";
              {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("array_rcall_expr");
    }
  }

  final public String tuple_rvalue_expr() throws ParseException {
    trace_call("tuple_rvalue_expr");
    try {
        String result = "";
        String f;
        String s;
      jj_consume_token(L_PAREN);
                        result += "( ";
      f = rvalue_expr();
                                result += f;
      label_11:
      while (true) {
        jj_consume_token(COMMA);
        s = rvalue_expr();
                                         result += "," + s;
        if (jj_2_38(10)) {
          ;
        } else {
          break label_11;
        }
      }
      jj_consume_token(R_PAREN);
                        result += ") ";
                {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("tuple_rvalue_expr");
    }
  }

  final public String literal() throws ParseException {
    trace_call("literal");
    try {
        String result="";
        Token t;
        Token s;
        String f;
      if (jj_2_39(10)) {
        t = jj_consume_token(NUMERIC_LITERAL);
                    result = t.toString();
      } else if (jj_2_40(10)) {
        t = jj_consume_token(STRING_LITERAL);
                    result = t.toString();
      } else if (jj_2_41(10)) {
        t = jj_consume_token(LOGICAL_LITERAL);
                    result = t.toString();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
            {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("literal");
    }
  }

  final public String fragment_definition() throws ParseException {
    trace_call("fragment_definition");
    try {
        String def = "";
        String f;
        String io[] = { "","" };
      io = fragment_declaration();
                                         ;
      f = body();
                                                            def += f;
        def = io[0] + def + io[1];
                {if (true) return def;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("fragment_definition");
    }
  }

  final public String[] fragment_declaration() throws ParseException {
    trace_call("fragment_declaration");
    try {
        Token t;
        String ts;
        String result="";
        String output;
        String paramlist;
        String io[] = { "", "" };
      jj_consume_token(5);
      t = jj_consume_token(IDENTIFIER);
                                       result += "def "; ts = t.toString(); result += ts;
      if (jj_2_42(10)) {
        generic_declaration();
      } else {
        ;
      }
      jj_consume_token(L_PAREN);
                     result += "(";
      paramlist = parameter_list();
                                       result += paramlist;
      jj_consume_token(R_PAREN);
                      result += "):"+"\u005cr\u005cn\u005cr\u005cn";
      jj_consume_token(ARROW);
      jj_consume_token(L_PAREN);
      output = result_list();
                                   io[1] += "\u005cr\u005cn" + "return " + output;
      jj_consume_token(R_PAREN);
        io[0] = result;

        {if (true) return io;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("fragment_declaration");
    }
  }

  final public String assignment_frg() throws ParseException {
    trace_call("assignment_frg");
    try {
  String res = "";
  String f;
  String s;
      f = lvalue_expr();
                          res += f;
      jj_consume_token(ASSIGN);
                                                     res += "=";
      s = rvalue_expr_frg();
                                                                                             res += s;
      jj_consume_token(SEMI_COLON);
                                                                                                                            res += ";\u005cr\u005cn";
        {if (true) return res;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("assignment_frg");
    }
  }

  final public String generic_declaration() throws ParseException {
    trace_call("generic_declaration");
    try {
        String type;
        String result="";
      jj_consume_token(LESS);
      jj_consume_token(QUESTION);
      if (jj_2_43(10)) {
        jj_consume_token(ASSIGN);
        type = type_name();
                                               result += type;
      } else {
        ;
      }
      jj_consume_token(GREATER);
            {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("generic_declaration");
    }
  }

  final public String parameter_list() throws ParseException {
    trace_call("parameter_list");
    try {
        String result="";
        String paramlist;
      paramlist = parameter();
                                        result += paramlist;
      label_12:
      while (true) {
        if (jj_2_44(10)) {
          ;
        } else {
          break label_12;
        }
        jj_consume_token(COMMA);
        paramlist = parameter();
                                                                                                result += ", " + paramlist;
      }
            {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("parameter_list");
    }
  }

  final public String parameter() throws ParseException {
    trace_call("parameter");
    try {
        Token t;
        String ts;
        String result="";
        String type;
        String literal;
      t = jj_consume_token(IDENTIFIER);
                                   ts = t.toString(); result += ts;
      jj_consume_token(COLON);
      type_spec();
      if (jj_2_45(10)) {
        jj_consume_token(ASSIGN);
        literal_expr();
      } else {
        ;
      }
            {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("parameter");
    }
  }

  final public String result_list() throws ParseException {
    trace_call("result_list");
    try {
        String result="";
        String paramlist;
      paramlist = result();
                                     result += paramlist;
      label_13:
      while (true) {
        if (jj_2_46(10)) {
          ;
        } else {
          break label_13;
        }
        jj_consume_token(COMMA);
        paramlist = result();
                                                                                          result += paramlist;
      }
            {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("result_list");
    }
  }

  final public String result() throws ParseException {
    trace_call("result");
    try {
        Token t;
        String ts;
        String result="";
        String type;
        String literal;
      t = jj_consume_token(IDENTIFIER);
                                   ts = t.toString(); result += ts;
      jj_consume_token(COLON);
      type = type_spec();
            {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("result");
    }
  }

  final public String rvalue_expr_frg() throws ParseException {
    trace_call("rvalue_expr_frg");
    try {
        String result = "";
        Token id;
        String f;
      if (jj_2_47(10)) {
        result = if_invoc_else_expr();
                                         ;
      } else if (jj_2_48(10)) {
        result = invocation();
                                      ;
      } else if (jj_2_49(10)) {
        result = built_if_expr();
                                         ;
      } else if (jj_2_50(10)) {
        result = builtin_expr();
                                        ;
      } else if (jj_2_51(10)) {
        id = jj_consume_token(IDENTIFIER);
                                    result += id.toString();
      } else if (jj_2_52(10)) {
        result = literal();
                                   ;
      } else if (jj_2_53(10)) {
        result = binary_expr();
                                       ;
      } else if (jj_2_54(10)) {
        result = unary_expr();
                                      ;
      } else if (jj_2_55(10)) {
        result = array_rvalue_expr();
                                             ;
      } else if (jj_2_56(10)) {
        result = paren_expr();
                                      ;
      } else if (jj_2_57(10)) {
        result = tuple_rvalue_expr();
                                             ;
      } else if (jj_2_58(10)) {
        result = subscript();
                                     ;
      } else if (jj_2_59(10)) {
        result = comprehension_expr();
                                              ;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_60(10)) {
        f = if_else_expr();
                                 result += f;
      } else {
        ;
      }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("rvalue_expr_frg");
    }
  }

  final public String subscript() throws ParseException {
    trace_call("subscript");
    try {
        String result = "";
        String f;
        String s;
      f = rvalue_expr();
                              result += f;
      jj_consume_token(L_BRACKET);
                                                               result += "[";
      if (jj_2_63(10)) {
        f = rvalue_expr();
                                 result += f;
      } else if (jj_2_64(10)) {
        if (jj_2_61(10)) {
          f = rvalue_expr();
                                   result += f;
        } else {
          ;
        }
        jj_consume_token(COLON);
                                                          result += ":";
        if (jj_2_62(10)) {
          s = rvalue_expr();
                                                                                                   result += s;
        } else {
          ;
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(R_BRACKET);
                        result += "]";
           {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("subscript");
    }
  }

  final public String if_else_expr() throws ParseException {
    trace_call("if_else_expr");
    try {
        String result = "";
        String f;
      jj_consume_token(20);
             result += " if " ;
      f = rvalue_expr_frg();
                                                            result += f;
      jj_consume_token(21);
               result += " else ";
      f = rvalue_expr_frg();
                                                               result += f;
      {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("if_else_expr");
    }
  }

  final public String loop_iter() throws ParseException {
    trace_call("loop_iter");
    try {
  String result = "";
  Token t;
  String f;
  String s;
      t = jj_consume_token(IDENTIFIER);
                                  ;
      jj_consume_token(18);
      s = rvalue_expr();
                                                                 ;
                                                                       result += t.toString() + " in " + s;
            {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("loop_iter");
    }
  }

  final public String loop_iter_list() throws ParseException {
    trace_call("loop_iter_list");
    try {
        String result = "";
        String f;
        String s;
      f = loop_iter();
                              result += f;
      label_14:
      while (true) {
        if (jj_2_65(10)) {
          ;
        } else {
          break label_14;
        }
        jj_consume_token(COMMA);
        s = loop_iter();
                                         result += "," + s;
      }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("loop_iter_list");
    }
  }

  final public String comprehension_expr() throws ParseException {
    trace_call("comprehension_expr");
    try {
        String result = "";
        String f;
        String s;
        Token t;
      jj_consume_token(L_BRACKET);
      jj_consume_token(17);
                            result += "[" + "for";
      f = loop_iter_list();
                             result += f;
      if (jj_2_66(10)) {
        t = jj_consume_token(IDENTIFIER);
                              result += t.toString();
        f = rvalue_expr_frg();
                                                                                  result += f;
      } else {
        ;
      }
      jj_consume_token(19);
      s = rvalue_expr_frg();
                                       result += "yield" + s;
      jj_consume_token(R_BRACKET);
                      result += "]";
    {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("comprehension_expr");
    }
  }

  final public String array_rvalue_expr() throws ParseException {
    trace_call("array_rvalue_expr");
    try {
        String result = "";
        String f;
      jj_consume_token(L_BRACKET);
                            result += "[";
      if (jj_2_68(10)) {
        f = rvalue_expr();
                                                                    result += f;
        label_15:
        while (true) {
          if (jj_2_67(10)) {
            ;
          } else {
            break label_15;
          }
          jj_consume_token(COMMA);
          f = rvalue_expr();
                                                                                                                  result += "," + f;
        }
      } else {
        ;
      }
      jj_consume_token(R_BRACKET);
                            result += "]";
                {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("array_rvalue_expr");
    }
  }

  final public String literal_expr() throws ParseException {
    trace_call("literal_expr");
    try {
  String result = "";
  Token id;
      if (jj_2_69(10)) {
        result = literal();
                             ;
      } else if (jj_2_70(10)) {
        result = array_literal_expr();
                                       ;
      } else if (jj_2_71(10)) {
        result = tuple_literal_expr();
                                       ;
      } else if (jj_2_72(10)) {
        result = builtin_expr();
                                  ;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("literal_expr");
    }
  }

  final public String array_literal_expr() throws ParseException {
    trace_call("array_literal_expr");
    try {
        String result = "";
        String f;
        String s;
      jj_consume_token(L_BRACKET);
                            result += "[ ";
      if (jj_2_74(10)) {
        f = literal_expr();
                                       result += f;
        label_16:
        while (true) {
          if (jj_2_73(10)) {
            ;
          } else {
            break label_16;
          }
          jj_consume_token(COMMA);
          s = literal_expr();
                                                result += ',' + s;
        }
      } else {
        ;
      }
      jj_consume_token(R_BRACKET);
                          result += " ]";
                {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("array_literal_expr");
    }
  }

  final public String tuple_literal_expr() throws ParseException {
    trace_call("tuple_literal_expr");
    try {
        String result = "";
        String f;
        String s;
      jj_consume_token(L_PAREN);
      f = literal_expr();
                                             result += f;
      label_17:
      while (true) {
        jj_consume_token(COMMA);
        s = literal_expr();
                                                                                            result += ',' + s;
        if (jj_2_75(10)) {
          ;
        } else {
          break label_17;
        }
      }
      jj_consume_token(R_PAREN);
                {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("tuple_literal_expr");
    }
  }

  final public String array_type_spec() throws ParseException {
    trace_call("array_type_spec");
    try {
        String result = "";
      if (jj_2_76(10)) {
        result = tuple_type_spec();
                                     ;
      } else if (jj_2_77(10)) {
        result = tensor_type_spec();
                                                                           ;
      } else if (jj_2_78(10)) {
        result = type_name();
                                                                                                          ;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(L_BRACKET);
      jj_consume_token(R_BRACKET);
       result += "[]"; {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("array_type_spec");
    }
  }

  final public String tuple_type_spec() throws ParseException {
    trace_call("tuple_type_spec");
    try {
        String result="";
        String f;
        String s;
      jj_consume_token(L_PAREN);
      f = type_spec();
                                     result += f;
      label_18:
      while (true) {
        jj_consume_token(COMMA);
        s = type_spec();
                                                                                   result += s;
        if (jj_2_79(10)) {
          ;
        } else {
          break label_18;
        }
      }
      jj_consume_token(R_PAREN);
       {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("tuple_type_spec");
    }
  }

  final public String type_name() throws ParseException {
    trace_call("type_name");
    try {
        String result;
      if (jj_2_80(10)) {
        jj_consume_token(9);
                       result = "tensor";
      } else if (jj_2_81(10)) {
        jj_consume_token(10);
                        result = "integer";
      } else if (jj_2_82(10)) {
        jj_consume_token(11);
                       result = "scalar";
      } else if (jj_2_83(10)) {
        jj_consume_token(12);
                        result = "logical";
      } else if (jj_2_84(10)) {
        jj_consume_token(13);
                       result = "string";
      } else if (jj_2_85(10)) {
        jj_consume_token(QUESTION);
                  result = "?";
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
            {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("type_name");
    }
  }

  final public String tensor_type_spec() throws ParseException {
    trace_call("tensor_type_spec");
    try {
        String result = "";
        String type;
      jj_consume_token(9);
      jj_consume_token(LESS);
      if (jj_2_86(10)) {
        type = type_name();
                                                result = type;
      } else {
        ;
      }
      jj_consume_token(GREATER);
            {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("tensor_type_spec");
    }
  }

  final public String assign_type_spec() throws ParseException {
    trace_call("assign_type_spec");
    try {
        String result = "";
        String type;
      type = type_name();
                                 result += type;
      jj_consume_token(ASSIGN);
      type = rvalue_expr();
                                                                                     result += type;
            {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("assign_type_spec");
    }
  }

  final public String type_spec() throws ParseException {
    trace_call("type_spec");
    try {
        String result;
      if (jj_2_87(10)) {
        result = assign_type_spec();
                                            ;
      } else if (jj_2_88(10)) {
        result = tensor_type_spec();
                                            ;
      } else if (jj_2_89(10)) {
        result = array_type_spec();
                                           ;
      } else if (jj_2_90(10)) {
        result = tuple_type_spec();
                                           ;
      } else if (jj_2_91(10)) {
        result = type_name();
                                      ;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
            {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("type_spec");
    }
  }

  final public String comparison_operator() throws ParseException {
    trace_call("comparison_operator");
    try {
        String result;
      if (jj_2_92(10)) {
        jj_consume_token(LESS);
                        result = "<";
      } else if (jj_2_93(10)) {
        jj_consume_token(LESS_EQUAL);
                         result = "<=";
      } else if (jj_2_94(10)) {
        jj_consume_token(GREATER);
                        result = ">";
      } else if (jj_2_95(10)) {
        jj_consume_token(GREATER_EQUAL);
                         result = ">=";
      } else if (jj_2_96(10)) {
        jj_consume_token(EQUAL);
                         result = "==";
      } else if (jj_2_97(10)) {
        jj_consume_token(NOT_EQUAL);
                         result = "!=";
      } else if (jj_2_98(10)) {
        jj_consume_token(18);
                         result = "in";
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
        {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("comparison_operator");
    }
  }

  final public String binary_arithmetic_operator() throws ParseException {
    trace_call("binary_arithmetic_operator");
    try {
        String result;
      if (jj_2_99(10)) {
        jj_consume_token(PLUS);
                        result = "+";
      } else if (jj_2_100(10)) {
        jj_consume_token(MINUS);
                        result = "-";
      } else if (jj_2_101(10)) {
        jj_consume_token(MULT);
                        result = "*";
      } else if (jj_2_102(10)) {
        jj_consume_token(DIV);
                        result = "/";
      } else if (jj_2_103(10)) {
        jj_consume_token(POW);
                        result = "^";
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
        {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("binary_arithmetic_operator");
    }
  }

  final public String binary_logical_operator() throws ParseException {
    trace_call("binary_logical_operator");
    try {
        String result;
      if (jj_2_104(10)) {
        jj_consume_token(54);
                         result = "&&";
      } else if (jj_2_105(10)) {
        jj_consume_token(55);
                         result = "||";
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
        {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("binary_logical_operator");
    }
  }

  final public String binary_operator() throws ParseException {
    trace_call("binary_operator");
    try {
        String result;
      if (jj_2_106(10)) {
        result = comparison_operator();
                                               ;
      } else if (jj_2_107(10)) {
        result = binary_arithmetic_operator();
                                                      ;
      } else if (jj_2_108(10)) {
        result = binary_logical_operator();
                                                   ;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
            {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("binary_operator");
    }
  }

  final public String unary_arithmetic_operator() throws ParseException {
    trace_call("unary_arithmetic_operator");
    try {
        String result;
      if (jj_2_109(10)) {
        jj_consume_token(PLUS);
                        result = "+";
      } else if (jj_2_110(10)) {
        jj_consume_token(MINUS);
                        result = "-";
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
        {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("unary_arithmetic_operator");
    }
  }

  final public String unary_logical_operator() throws ParseException {
    trace_call("unary_logical_operator");
    try {
        String result;
      jj_consume_token(NOT);
                        result = "!";
        {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("unary_logical_operator");
    }
  }

  final public String unary_operator() throws ParseException {
    trace_call("unary_operator");
    try {
        String result;
      if (jj_2_111(10)) {
        result = unary_arithmetic_operator();
                                                     ;
      } else if (jj_2_112(10)) {
        result = unary_logical_operator();
                                                  ;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
            {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("unary_operator");
    }
  }

  final public String unary_expr() throws ParseException {
    trace_call("unary_expr");
    try {
        String result="";
        String f;
        String s;
      f = unary_operator();
                                     result += f;
      s = rvalue_expr();
                                                                           result += s;
            {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("unary_expr");
    }
  }

  final public String binary_expr() throws ParseException {
    trace_call("binary_expr");
    try {
        String result="";
        Token id;
        String f;
        String s;
        String t;
      f = rvalue_expr();
                                  result += f;
      s = binary_operator();
                                                                            result += s;
      t = rvalue_expr();
                                                                                                                   result += t;
            {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("binary_expr");
    }
  }

  final public String paren_expr() throws ParseException {
    trace_call("paren_expr");
    try {
        String result;
      jj_consume_token(L_PAREN);
      result = rvalue_expr();
                                                ;
      jj_consume_token(R_PAREN);
                {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("paren_expr");
    }
  }

  final public String builtin_name() throws ParseException {
    trace_call("builtin_name");
    try {
        String result = "";
        Token id;
      if (jj_2_113(10)) {
        jj_consume_token(14);
                         result = " tf.shape";
      } else if (jj_2_114(10)) {
        jj_consume_token(15);
                          result = " len";
      } else if (jj_2_115(10)) {
        jj_consume_token(16);
                         result = " range_of";
      } else if (jj_2_116(10)) {
        jj_consume_token(10);
                        result = " integer";
      } else if (jj_2_117(10)) {
        jj_consume_token(11);
                       result = " scalar";
      } else if (jj_2_118(10)) {
        jj_consume_token(12);
                        result = " logical";
      } else if (jj_2_119(10)) {
        jj_consume_token(13);
                       result = " string";
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
            {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("builtin_name");
    }
  }

  final public String builtin_expr() throws ParseException {
    trace_call("builtin_expr");
    try {
        String res = "";
        String f;
        String s;
      f = builtin_name();
                                 res += f;
      jj_consume_token(L_PAREN);
      s = rvalue_expr();
                                                                               ;
      jj_consume_token(R_PAREN);
                                                                                                  res += "( " + s + " )";
           {if (true) return res;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("builtin_expr");
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  private boolean jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  private boolean jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  private boolean jj_2_100(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(99, xla); }
  }

  private boolean jj_2_101(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(100, xla); }
  }

  private boolean jj_2_102(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_102(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(101, xla); }
  }

  private boolean jj_2_103(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_103(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(102, xla); }
  }

  private boolean jj_2_104(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_104(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(103, xla); }
  }

  private boolean jj_2_105(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_105(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(104, xla); }
  }

  private boolean jj_2_106(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_106(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(105, xla); }
  }

  private boolean jj_2_107(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_107(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(106, xla); }
  }

  private boolean jj_2_108(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_108(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(107, xla); }
  }

  private boolean jj_2_109(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_109(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(108, xla); }
  }

  private boolean jj_2_110(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_110(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(109, xla); }
  }

  private boolean jj_2_111(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_111(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(110, xla); }
  }

  private boolean jj_2_112(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_112(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(111, xla); }
  }

  private boolean jj_2_113(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_113(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(112, xla); }
  }

  private boolean jj_2_114(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_114(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(113, xla); }
  }

  private boolean jj_2_115(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_115(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(114, xla); }
  }

  private boolean jj_2_116(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_116(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(115, xla); }
  }

  private boolean jj_2_117(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_117(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(116, xla); }
  }

  private boolean jj_2_118(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_118(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(117, xla); }
  }

  private boolean jj_2_119(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_119(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(118, xla); }
  }

  private boolean jj_3_72() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_71() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3_70() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3_69() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_69()) {
    jj_scanpos = xsp;
    if (jj_3_70()) {
    jj_scanpos = xsp;
    if (jj_3_71()) {
    jj_scanpos = xsp;
    if (jj_3_72()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_62() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(L_BRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_68()) jj_scanpos = xsp;
    if (jj_scan_token(R_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_28()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_66() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(LESS)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(53)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(L_BRACKET)) return true;
    if (jj_scan_token(17)) return true;
    if (jj_3R_67()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_66()) jj_scanpos = xsp;
    if (jj_scan_token(19)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(R_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_65() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_47()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_65()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(18)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(20)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(21)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_61() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_61()) jj_scanpos = xsp;
    if (jj_scan_token(COLON)) return true;
    xsp = jj_scanpos;
    if (jj_3_62()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_63() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_29()) return true;
    if (jj_scan_token(L_BRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3_64()) return true;
    }
    if (jj_scan_token(R_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_60() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_59() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_58() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_57() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_56() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_55() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_53() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_52() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) jj_scanpos = xsp;
    if (jj_scan_token(L_PAREN)) return true;
    if (jj_3R_63()) return true;
    if (jj_scan_token(R_PAREN)) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) {
    jj_scanpos = xsp;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3_58()) {
    jj_scanpos = xsp;
    if (jj_3_59()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3_60()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_64()) return true;
    if (jj_scan_token(L_PAREN)) return true;
    if (jj_3R_29()) return true;
    if (jj_scan_token(R_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_40()) return true;
    if (jj_3R_48()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_119() {
    if (jj_scan_token(13)) return true;
    return false;
  }

  private boolean jj_3_118() {
    if (jj_scan_token(12)) return true;
    return false;
  }

  private boolean jj_3_117() {
    if (jj_scan_token(11)) return true;
    return false;
  }

  private boolean jj_3_116() {
    if (jj_scan_token(10)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_115() {
    if (jj_scan_token(16)) return true;
    return false;
  }

  private boolean jj_3_7() {
    Token xsp;
    if (jj_3_5()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_114() {
    if (jj_scan_token(15)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_113() {
    if (jj_scan_token(14)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_113()) {
    jj_scanpos = xsp;
    if (jj_3_114()) {
    jj_scanpos = xsp;
    if (jj_3_115()) {
    jj_scanpos = xsp;
    if (jj_3_116()) {
    jj_scanpos = xsp;
    if (jj_3_117()) {
    jj_scanpos = xsp;
    if (jj_3_118()) {
    jj_scanpos = xsp;
    if (jj_3_119()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_52()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(L_PAREN)) return true;
    if (jj_3R_29()) return true;
    if (jj_scan_token(R_PAREN)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_44()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_29()) return true;
    if (jj_3R_65()) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_6() {
    Token xsp;
    if (jj_3_4()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(LESS)) return true;
    if (jj_scan_token(QUESTION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) jj_scanpos = xsp;
    if (jj_scan_token(GREATER)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_33()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(SEMI_COLON)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_66()) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_112() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3_111() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_111()) {
    jj_scanpos = xsp;
    if (jj_3_112()) return true;
    }
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(L_BRACE)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_33()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(SEMI_COLON)) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) jj_scanpos = xsp;
    if (jj_scan_token(NUMERIC_LITERAL)) return true;
    xsp = jj_scanpos;
    if (jj_3_36()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3_110() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3_109() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_109()) {
    jj_scanpos = xsp;
    if (jj_3_110()) return true;
    }
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(5)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) jj_scanpos = xsp;
    if (jj_scan_token(L_PAREN)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(R_PAREN)) return true;
    if (jj_scan_token(ARROW)) return true;
    if (jj_scan_token(L_PAREN)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(8)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(L_PAREN)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(R_PAREN)) return true;
    if (jj_scan_token(ARROW)) return true;
    if (jj_scan_token(L_PAREN)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(R_PAREN)) return true;
    return false;
  }

  private boolean jj_3_108() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3_107() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3_106() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_106()) {
    jj_scanpos = xsp;
    if (jj_3_107()) {
    jj_scanpos = xsp;
    if (jj_3_108()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_105() {
    if (jj_scan_token(55)) return true;
    return false;
  }

  private boolean jj_3_104() {
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_60()) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(LOGICAL_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_104()) {
    jj_scanpos = xsp;
    if (jj_3_105()) return true;
    }
    return false;
  }

  private boolean jj_3_103() {
    if (jj_scan_token(POW)) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_102() {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  private boolean jj_3_101() {
    if (jj_scan_token(MULT)) return true;
    return false;
  }

  private boolean jj_3_100() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3_99() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(NUMERIC_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_99()) {
    jj_scanpos = xsp;
    if (jj_3_100()) {
    jj_scanpos = xsp;
    if (jj_3_101()) {
    jj_scanpos = xsp;
    if (jj_3_102()) {
    jj_scanpos = xsp;
    if (jj_3_103()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_98() {
    if (jj_scan_token(18)) return true;
    return false;
  }

  private boolean jj_3_97() {
    if (jj_scan_token(NOT_EQUAL)) return true;
    return false;
  }

  private boolean jj_3_96() {
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3_95() {
    if (jj_scan_token(GREATER_EQUAL)) return true;
    return false;
  }

  private boolean jj_3_94() {
    if (jj_scan_token(GREATER)) return true;
    return false;
  }

  private boolean jj_3_93() {
    if (jj_scan_token(LESS_EQUAL)) return true;
    return false;
  }

  private boolean jj_3_92() {
    if (jj_scan_token(LESS)) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_78() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_92()) {
    jj_scanpos = xsp;
    if (jj_3_93()) {
    jj_scanpos = xsp;
    if (jj_3_94()) {
    jj_scanpos = xsp;
    if (jj_3_95()) {
    jj_scanpos = xsp;
    if (jj_3_96()) {
    jj_scanpos = xsp;
    if (jj_3_97()) {
    jj_scanpos = xsp;
    if (jj_3_98()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(L_PAREN)) return true;
    if (jj_3R_29()) return true;
    Token xsp;
    if (jj_3_38()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_38()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(R_PAREN)) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_91() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_90() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_89() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_88() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_87() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_87()) {
    jj_scanpos = xsp;
    if (jj_3_88()) {
    jj_scanpos = xsp;
    if (jj_3_89()) {
    jj_scanpos = xsp;
    if (jj_3_90()) {
    jj_scanpos = xsp;
    if (jj_3_91()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_79() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_86() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_75() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_scan_token(NUMERIC_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(9)) return true;
    if (jj_scan_token(LESS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_86()) jj_scanpos = xsp;
    if (jj_scan_token(GREATER)) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(L_BRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) jj_scanpos = xsp;
    if (jj_scan_token(R_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_77() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(NOT_EQUAL)) return true;
    return false;
  }

  private boolean jj_3_85() {
    if (jj_scan_token(QUESTION)) return true;
    return false;
  }

  private boolean jj_3_84() {
    if (jj_scan_token(13)) return true;
    return false;
  }

  private boolean jj_3_83() {
    if (jj_scan_token(12)) return true;
    return false;
  }

  private boolean jj_3_82() {
    if (jj_scan_token(11)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(20)) return true;
    if (jj_3R_30()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) return true;
    }
    if (jj_scan_token(NUMERIC_LITERAL)) return true;
    if (jj_scan_token(21)) return true;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) return true;
    }
    return false;
  }

  private boolean jj_3_81() {
    if (jj_scan_token(10)) return true;
    return false;
  }

  private boolean jj_3_80() {
    if (jj_scan_token(9)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_80()) {
    jj_scanpos = xsp;
    if (jj_3_81()) {
    jj_scanpos = xsp;
    if (jj_3_82()) {
    jj_scanpos = xsp;
    if (jj_3_83()) {
    jj_scanpos = xsp;
    if (jj_3_84()) {
    jj_scanpos = xsp;
    if (jj_3_85()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_67() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_33()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_21()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) return true;
    }
    if (jj_3_26()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(L_PAREN)) return true;
    if (jj_3R_33()) return true;
    Token xsp;
    if (jj_3_23()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_23()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(R_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) return true;
    }
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(L_PAREN)) return true;
    if (jj_3R_52()) return true;
    Token xsp;
    if (jj_3_79()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_79()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(R_PAREN)) return true;
    return false;
  }

  private boolean jj_3_76() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_76()) {
    jj_scanpos = xsp;
    if (jj_3_77()) {
    jj_scanpos = xsp;
    if (jj_3_78()) return true;
    }
    }
    if (jj_scan_token(L_BRACKET)) return true;
    if (jj_scan_token(R_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(L_BRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) jj_scanpos = xsp;
    if (jj_scan_token(R_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(L_PAREN)) return true;
    if (jj_3R_36()) return true;
    Token xsp;
    if (jj_3_75()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_75()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(R_PAREN)) return true;
    return false;
  }

  private boolean jj_3_73() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_74() {
    if (jj_3R_36()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_73()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_68() {
    if (jj_3R_29()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_67()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(L_BRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_74()) jj_scanpos = xsp;
    if (jj_scan_token(R_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public nnef18TokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[119];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public nnef18(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public nnef18(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new nnef18TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public nnef18(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new nnef18TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public nnef18(nnef18TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(nnef18TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[56];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 56; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 119; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
            case 95: jj_3_96(); break;
            case 96: jj_3_97(); break;
            case 97: jj_3_98(); break;
            case 98: jj_3_99(); break;
            case 99: jj_3_100(); break;
            case 100: jj_3_101(); break;
            case 101: jj_3_102(); break;
            case 102: jj_3_103(); break;
            case 103: jj_3_104(); break;
            case 104: jj_3_105(); break;
            case 105: jj_3_106(); break;
            case 106: jj_3_107(); break;
            case 107: jj_3_108(); break;
            case 108: jj_3_109(); break;
            case 109: jj_3_110(); break;
            case 110: jj_3_111(); break;
            case 111: jj_3_112(); break;
            case 112: jj_3_113(); break;
            case 113: jj_3_114(); break;
            case 114: jj_3_115(); break;
            case 115: jj_3_116(); break;
            case 116: jj_3_117(); break;
            case 117: jj_3_118(); break;
            case 118: jj_3_119(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
